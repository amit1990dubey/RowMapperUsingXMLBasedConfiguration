
Spring DataAccess with JdbcDaoSupport

when you want to perform any persistent operation then you need to write the JDBC code with the following steps.

try
{

take connection
create statement
prepareSQL
submit the sql
process the result
}

catch()
{

}

finally
{
cleanup activities
}

you can see the following problem with above code

1. All the above statement other than 4 and 6 common for all the persistent operation which give you code duplication problem.
2.all the method in JDBC API are throwing the common exception called java.sql.SQLException which is checked exception because of checked ex w]you need to try or catch block in every program.
3. There is no clear Categorization of exception in JDBC.


1. In spring DataAccessException There is one root cause exception called DataAccessException.
which is unchecked or runtime exception . Because of unchecked excption you no need to write tr catch block for every program.
3. In spring data access there is clear categorization of exception.

Like ResultSetExtractor, we can use RowMapper interface to fetch the records from the database using query() method of\
   JdbcTemplate class. In the execute of we need to pass the instance of RowMapper now.

RowMapper interface allows to map a row of the relations with the instance of user-defined class. It iterates the ResultSet\
   internally and adds it into the collection. So we don't need to write a lot of code to fetch the records as\
   ResultSetExtractor.

Advantage of RowMapper over ResultSetExtractor
RowMapper saves a lot of code becuase it internally adds the data of ResultSet into the collection.